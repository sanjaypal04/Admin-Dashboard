

### **1. Check User Role in Controller**

In **Laravel**, you can check user roles using **Spatie's permission package**. You can do this easily in your controller methods.

#### **Example: Check User Role in Controller**

Let's say you want to check if the logged-in user is an `Admin` before accessing certain parts of your application:

```php
use App\Models\User;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

class AdminController extends Controller
{
    public function __construct()
    {
        // Restrict access to this controller to users with the 'Admin' role
        $this->middleware('role:Admin');
    }

    // Example method where we check the role of the current user
    public function index()
    {
        if (auth()->user()->hasRole('Admin')) {
            // Logic for admin dashboard
            return view('admin.dashboard');
        }

        return redirect()->route('home')->with('error', 'Access denied.');
    }

    // Another example method to check a different role
    public function userManagement()
    {
        if (auth()->user()->hasRole('SuperAdmin')) {
            // Logic for super admin functionalities
            return view('admin.manage-users');
        }

        return redirect()->route('home')->with('error', 'You do not have the right permissions.');
    }
}
```

#### **Explanation:**
- **`hasRole()`**: This function checks if the user has a specific role. In this case, the `index` method checks if the logged-in user has the `Admin` role.
- **Middleware `role:Admin`**: The middleware ensures that only users with the `Admin` role can access specific routes or controllers.

---

### **2. Display Role-Based Content in the Blade View**

Sometimes, you want to display different content to users based on their roles.

#### **Example: Show Content Based on Role in Blade**

In your Blade views, you can conditionally display content based on the logged-in user's role.

```html
<!-- Example Blade View for Admin -->
@extends('layouts.app')

@section('content')
    <div class="container">
        @if(auth()->user()->hasRole('Admin'))
            <div class="alert alert-success">
                Welcome, Admin! You have full access to this page.
            </div>
            <!-- Admin specific content here -->
            <h3>Admin Dashboard</h3>
        @elseif(auth()->user()->hasRole('User'))
            <div class="alert alert-info">
                Welcome, User! You have limited access to this page.
            </div>
            <!-- User specific content here -->
            <h3>User Dashboard</h3>
        @else
            <div class="alert alert-danger">
                You do not have the required permissions to view this content.
            </div>
        @endif
    </div>
@endsection
```

#### **Explanation:**
- **`hasRole()`**: The Blade `@if` statement checks if the logged-in user has a certain role (`Admin` or `User`), and based on that, it shows different content.

---

### **3. Restrict Access with Middleware in Routes**

To restrict certain routes to specific roles, you can use **middleware**.

#### **Example: Restrict Routes to Specific Roles**

In your `routes/web.php` file, you can protect routes using the `role` middleware.

```php
use App\Http\Controllers\AdminController;

// Protect the route so only users with 'Admin' role can access it
Route::get('/admin', [AdminController::class, 'index'])->middleware('role:Admin');

// Protect the route for 'SuperAdmin' role
Route::get('/super-admin', [AdminController::class, 'userManagement'])->middleware('role:SuperAdmin');
```

#### **Explanation:**
- **`middleware('role:Admin')`**: This middleware ensures that only users with the `Admin` role can access the `admin` route. If the user doesn't have the required role, they will be redirected or shown an error.

---

### **4. Assign Roles to Users**

You can assign roles to users programmatically in your application. For instance, after a user registers or in a seeder, you can assign them a role.

#### **Example: Assign Role to a User**

In a controller or seeder, you can assign roles like this:

```php
use App\Models\User;
use Spatie\Permission\Models\Role;

class UserController extends Controller
{
    public function assignRole()
    {
        $user = User::find(1); // Get user by ID

        // Assign role to user
        $user->assignRole('Admin');
    }
}
```

#### **Explanation:**
- **`assignRole()`**: This function assigns a specific role (`Admin`) to the user. You can also assign multiple roles like this: `$user->assignRole(['Admin', 'Editor']);`

---

### **5. Remove Roles from Users**

You can also **remove roles** from users if needed.

#### **Example: Remove Role from a User**

```php
use App\Models\User;

class UserController extends Controller
{
    public function removeRole()
    {
        $user = User::find(1); // Get user by ID

        // Remove 'Admin' role from the user
        $user->removeRole('Admin');
    }
}
```

#### **Explanation:**
- **`removeRole()`**: This method removes a specific role from the user.

---

### **6. Check User Permissions**

You can also check user **permissions** using Spatieâ€™s permission package.

#### **Example: Check User Permission in Controller**

```php
public function someMethod()
{
    if (auth()->user()->can('edit posts')) {
        // Perform action if user has permission
    } else {
        return redirect()->route('home')->with('error', 'You do not have permission.');
    }
}
```

#### **Explanation:**
- **`can('edit posts')`**: This checks if the logged-in user has the `edit posts` permission.

---

### **Cheat Sheet Summary**

1. **Assign Roles to Users**: 
   ```php
   $user->assignRole('Admin');
   ```

2. **Remove Roles from Users**: 
   ```php
   $user->removeRole('Admin');
   ```

3. **Check Role in Controller**:
   ```php
   if (auth()->user()->hasRole('Admin')) {
       // Access granted
   }
   ```

4. **Check Role in Blade**:
   ```blade
   @if(auth()->user()->hasRole('Admin'))
       <!-- Show content for Admin -->
   @endif
   ```

5. **Restrict Access with Middleware**:
   ```php
   Route::get('/admin', [AdminController::class, 'index'])->middleware('role:Admin');
   ```

6. **Check Permissions**:
   ```php
   if (auth()->user()->can('edit posts')) {
       // Do something
   }
   ```

---

This cheat sheet provides an easy-to-follow guide on how to implement and use roles and permissions in **Laravel** with **Spatie**'s permission package. It covers the basics from **assigning roles** to **checking roles and permissions** in the **controller** and **views**. 

Let me know if you need further examples or details!